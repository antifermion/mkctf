# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     file: challenge.py
#     date: 2018-02-27
#   author: paul.dautry
#  purpose:
#
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# =============================================================================
#  IMPORTS
# =============================================================================
import os
import os.path as path
from stat import S_IRWXU
from core.object.configurable import Configurable
# =============================================================================
#  CLASSES
# =============================================================================
##
## @brief      Class for challenge.
##
class Challenge(Configurable):
    ##
    ## @brief      { function_description }
    ##
    ## @param      size       The size
    ##
    @staticmethod
    def make_flag(repo_conf, size=32):
        return "{}{}{}".format(repo_conf['flag']['prefix'],
                               os.urandom(size).hex(),
                               repo_conf['flag']['suffix'])
    ##
    ## @brief      Constructs the object.
    ##
    def __init__(self, logger, chall_conf_path, repo_conf):
        super().__init__(logger, chall_conf_path)
        self.repo_conf = repo_conf
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def __create_dir(self, directory):
        dir_path = path.join(self.working_dir(), directory)

        if not path.isdir(dir_path):
            os.mkdir(dir_path)

            return True

        return False
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def __create_file(self, file, executable=False):
        file_path = path.join(self.working_dir(), file)

        os.makedirs(path.dirname(file_path), exist_ok=True)

        if not path.isfile(file_path):
            with open(file_path, 'w') as f:
                f.write('# file automatically generated by mkctf.')

            if executable:
                os.chmod(file_path, S_IRWXU)

            return True

        return False
    ##
    ## @brief      Creates a new challenge
    ##
    ## @param      self  The object
    ## @param      conf  The conf
    ##
    ## @return     { description_of_the_return_value }
    ##
    def create(self):
        try:
            os.makedirs(self.working_dir())
        except:
            return False

        for directory in self.repo_conf['directories']:
            if not self.__create_dir(directory):
                self.logger.warning("failed to create directory: "
                                    "{}".format(directory))

        for file in self.repo_conf['files']['txt']:
            if not self.__create_file(file):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))

        for file in self.repo_conf['files']['bin']:
            if not self.__create_file(file, executable=True):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))

        return True
