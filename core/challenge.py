# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     file: challenge.py
#     date: 2018-02-27
#   author: paul.dautry
#  purpose:
#
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# =============================================================================
#  IMPORTS
# =============================================================================
import os
import pprint
import os.path as path
from stat import S_IRWXU
from core.cli import CLI
from core.config import yaml_load, yaml_dump
# =============================================================================
#  CLASSES
# =============================================================================
##
## @brief      Class for challenge.
##
class Challenge(object):
    ##
    ## @brief      Constructs the object.
    ##
    def __init__(self, path, repo_conf, logger):
        super().__init__()
        self.path = path
        self.logger = logger
        self.files_bin = repo_conf['files']['bin']
        self.files_txt = repo_conf['files']['txt']
        self.conf_file = repo_conf['files']['config']['challenge']
        self.directories = repo_conf['directories']
        self.flag_prefix = repo_conf['flag']['prefix']
        self.flag_suffix = repo_conf['flag']['suffix']
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def create_dir(self, directory):
        dir_path = path.join(self.path, directory)

        if not path.isdir(dir_path):
            os.mkdir(dir_path)

            return True

        return False
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def create_file(self, file, executable=False):
        file_path = path.join(self.path, file)

        os.makedirs(path.dirname(file_path), exist_ok=True)

        if not path.isfile(file_path):
            with open(file_path, 'w') as f:
                f.write('# file automatically generated by mkctf.')

            if executable:
                os.chmod(file_path, S_IRWXU)

            return True

        return False
    ##
    ## @brief      { function_description }
    ##
    def exists(self):
        return path.isdir(self.path)
    ##
    ## @brief      { function_description }
    ##
    def conf_path(self):
        return path.join(self.path, self.conf_file)
    ##
    ## @brief      { function_description }
    ##
    def conf(self):
        conf_path = self.conf_path()
        if not path.isfile(conf_path):
           return None

        return yaml_load(conf_path)
    ##
    ## @brief      Creates a default conf.
    ##
    def create_default(self):
        yaml_dump(self.conf_path, {
            "enable": True,
            "static": False,
            "flag": "{}{}".format(self.flag_prefix, self.flag_suffix)
        })

        success = True

        for directory in self.directories:
            if not self.create_dir(directory):
                self.logger.warning("failed to create directory: "
                                    "{}".format(directory))
                success = False

        for file in self.files_txt:
            if not self.create_file(file):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))
                success = False

        for file in self.files_bin:
            if not self.create_file(file, executable=True):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))
                success = False

        return success
    ##
    ## @brief      { function_description }
    ##
    def print_conf(self):
        pprint.pprint(self.conf())
