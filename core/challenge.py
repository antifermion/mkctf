# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     file: challenge.py
#     date: 2018-02-27
#   author: paul.dautry
#  purpose:
#
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# =============================================================================
#  IMPORTS
# =============================================================================
import os
import pprint
import os.path as path
from stat import S_IRWXU
from core.cli import CLI
from core.config import yaml_load, yaml_dump
# =============================================================================
#  CLASSES
# =============================================================================
##
## @brief      Class for challenge.
##
class Challenge(object):
    ##
    ## @brief      Constructs the object.
    ##
    def __init__(self, path, repo_conf, logger):
        super().__init__()
        self.path = path
        self.repo_conf = repo_conf
        self.logger = logger
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def __create_dir(self, directory):
        dir_path = path.join(self.path, directory)

        if not path.isdir(dir_path):
            os.mkdir(dir_path)

            return True

        return False
    ##
    ## @brief      Creates a dir.
    ##
    ## @param      directory  The directory
    ##
    def __create_file(self, file, executable=False):
        file_path = path.join(self.path, file)

        os.makedirs(path.dirname(file_path), exist_ok=True)

        if not path.isfile(file_path):
            with open(file_path, 'w') as f:
                f.write('# file automatically generated by mkctf.')

            if executable:
                os.chmod(file_path, S_IRWXU)

            return True

        return False
    ##
    ## @brief      { function_description }
    ##
    ## @param      size       The size
    ##
    def new_flag(self, size=32):
        return "{}{}{}".format(self.repo_conf['flag']['prefix'],
                               os.urandom(size).hex(),
                               self.repo_conf['flag']['suffix'])
    ##
    ## @brief      { function_description }
    ##
    def exists(self):
        return path.isdir(self.path)
    ##
    ## @brief      { function_description }
    ##
    def conf_path(self):
        return path.join(self.path,
                         self.repo_conf['files']['config']['challenge'])
    ##
    ## @brief      { function_description }
    ##
    def conf(self):
        conf_path = self.conf_path()
        if not path.isfile(conf_path):
           return None

        return yaml_load(conf_path)
    ##
    ## @brief      { function_description }
    ##
    def print_conf(self):
        pprint.pprint(self.conf())
    ##
    ## @brief      Creates a new challenge
    ##
    ## @param      chall_path   The path
    ## @param      name         The name
    ## @param      points       The points
    ## @param      repo_conf    The repo conf
    ##
    def create(self, name, points):
        if self.exists():
            self.logger.error("challenge already exists...")
            return False

        os.makedirs(self.path)

        conf_path = path.join(self.path,
                              self.repo_conf['files']['config']['challenge'])

        conf = {
            "enable": True,
            "static": False,
            "parameters": {
                "name": name,
                "points": points,
                "flag": self.new_flag()
            }
        }
        yaml_dump(self.conf_path(), conf)

        for directory in self.repo_conf['directories']:
            if not self.__create_dir(directory):
                self.logger.warning("failed to create directory: "
                                    "{}".format(directory))

        for file in self.repo_conf['files']['txt']:
            if not self.__create_file(file):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))

        for file in self.repo_conf['files']['bin']:
            if not self.__create_file(file, executable=True):
                self.logger.warning("failed to create file: "
                                    "{}".format(file))

        return True
